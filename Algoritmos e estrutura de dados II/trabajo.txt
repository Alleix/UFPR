#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 250001

unsigned long long int y=0;

/*
int busca_linear(int V[], int n, int x)
{
    int i;
    for(i = 1; i < n; i++){
        y++;
        if(V[i] == x){ 
            return i;
        }
    }
    return -1;
}*/

int busca_linear_tempo(int V[], int n, int x)
{
    int i;
    for(i = 1; i < n; i++){
        
        if(V[i] == x){ 
            return i;
        }
    }
    return -1;
}


int busca_binaria(int V[], int esq, int dir, int x)
{
    if(dir < esq) return -1;
    int meio = (esq + dir) / 2;
    if(x == V[meio]){ 
        y++; 
        return meio;} 
        
    if(x < V[meio]){         
        y++;      
        return busca_binaria(V, esq, meio-1, x);}
    else{      
        y++;                    
        return busca_binaria(V, meio+1, dir, x);}
}


int main()
{   int v=0;

    int x;
    unsigned long long int a = y;
    int V[N];
    int n = sizeof(V)/sizeof(int);
    
    int i;
    V[0] = 0;
    for(i = 1; i < n; i++)
        V[i] = i;









 
/* tempo total em todas buscas lineares
for(i = 1; i < n; i++){
        clock_t t1,t2;
        t1 = clock();

        busca_linear_tempo(V,n,i);
        t2 = clock();
        v = v + t2 - t1;
        printf("Tempo total busca Linear: %fs ",(v)/(float)CLOCKS_PER_SEC);
        printf("    %d\n",i);
    }

*/


 






/* tempo total em todas as busca_binaria
        clock_t t1,t2;
        t1 = clock();
    for(i = 1; i < n; i++){
        
        

        busca_binaria(V,1,n-1,i);
    }
        t2 = clock();
        v=t2-t1;


    printf("Tempo total busca Binaria: %fs",(v)/(float)CLOCKS_PER_SEC);

*/













/* MAIOR E MENOR TEMPO BUSCA BINARIA
   // a=10000000; descomente para ver o menor ponto critico
    for(i = 1; i < n; i++){
        clock_t t1,t2;
        t1 = clock();

        busca_binaria(V,1,n-1,i);

        t2 = clock();
        y = t2-t1;

        //if(y < a){ descomente para ver o menor ponto critico
        //if(y > a){ descomente para ver o Maior ponto critico
            a = y;  
            printf("Pontos Criticos Atuais: %fs",(a)/(double)CLOCKS_PER_SEC);
            printf("\n");
        
        y=0;

    }

*/














/*  Menor e maior tempo Busca Linear

   // a=10000000; descomente para ver o menor ponto critico
    for(i = 1; i < n; i++){
        clock_t t1,t2;
        t1 = clock();

        busca_linear_tempo(V,n,i);

        t2 = clock();
        y = t2-t1;

        //if(y < a){ descomente para ver o menor ponto critico
        //if(y > a){ descomente para ver o Maior ponto critico
            a = y;  
            printf("Pontos Criticos Atuais: %fs",(a)/(double)CLOCKS_PER_SEC);
            printf("\n");
        
        y=0;

    }


}

//printf("Maior tempo é:%fs",(a)/(double)CLOCKS_PER_SEC);
//printf("menor tempo é:%fs",(a)/(double)CLOCKS_PER_SEC);
*/


/* Media do numero de elementos examinados na busca binaria

    for(i = 1; i < n; i++){
        busca_binaria(V,1,n-1,i);
        }
   
        printf("Media do numero de elementos examinados em cada busca: %llu \n",y/(N));
    y=0;
*/

/* Media do numero de elementos examinados na busca linear

    for(i = 1; i < n; i++){
        busca_linear(V,n,i);
        printf("%llu\n",y);
        }
   
        printf("Media do numero de elementos examinados em cada busca: %llu",y/(N));
*/


  /*  
    // a=10000000; descomente para ver o menor ponto critico
        for(i = 1; i < n; i++){
        printf("%d  ",busca_linear(V,n,i));
        //if (y >= a){ descomente para ver o MAIOR ponto critico
        //     if (y <= a){ descomente para ver o menor ponto critico
                a = y;  
                printf("Pontos Criticos Atuais: %d",a);
                
        }
        printf("\n");
        y=0;

    }*/


/*
    //a=10000000; descomente para ver o menor ponto critico
    for(i = 1; i < n; i++){
        printf("%d  ",busca_binaria(V,1,n-1,i));
            //if (y <= a){ descomente para ver o menor ponto critico
            //if (y >= a) {descomente para ver o MAIOR ponto critico
                a = y;  
                printf("Pontos Criticos atuais: %d verificacoes",a);  
            }
        printf("\n");
        y=0;    
        }

*/
}